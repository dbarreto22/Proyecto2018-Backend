/**
 * This file was generated by the JPA Modeler
 */
package com.miudelar.server.logic.entities;

import com.miudelar.server.logic.datatypes.DtAsignatura;
import com.miudelar.server.logic.datatypes.DtAsignatura_Carrera;
import com.miudelar.server.logic.datatypes.DtCarrera;
import com.miudelar.server.logic.datatypes.DtExamen;
import com.miudelar.server.logic.datatypes.DtExamenAng;
import java.io.Serializable;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.xml.bind.annotation.*;

/**
 * @author Windows XP
 */
//@XmlAccessorType(XmlAccessType.FIELD)
@Entity
@NamedQueries({
@NamedQuery(name = Examen.FIND_BY_FECHA_ASIGCAR, query = "Select E from Examen E, Asignatura_Carrera A where E.fecha = :fecha AND \n"
            + "E.asignatura_Carrera = A \n"
            + "AND A.id = :idAsigCar"),
    @NamedQuery(name = Examen.FIND_DISPONIBLES_ESTUDIANTE, query = "Select C from Examen C, Usuario U, Carrera B, Asignatura_Carrera A where C.asignatura_Carrera = A AND \n"
            + "A.carrera = B AND B member of U.carreras \n"
            + "AND U.cedula = :cedula"),
        @NamedQuery(name = Examen.GET_ESTUDIANTES_INSCRIPTOS_EXAMEN, 
                query = "SELECT U FROM Examen C, Estudiante_Examen E, Usuario U \n"
                + "WHERE C.id = :idExamen \n"
                + "AND E.examen = C \n"
                + "AND E.usuario = U")
})
//@NamedQueries({
//    @NamedQuery(name = "Examen.findAll", query = "Select e from Examen e"),
//    @NamedQuery(name = "Examen.findByFecha", query = "Select e from Examen e where e.fecha=:fecha")})
public class Examen implements Serializable {
    
    public final static String GET_ESTUDIANTES_INSCRIPTOS_EXAMEN = "Examen.GET_ESTUDIANTES_INSCRIPTOS_EXAMEN";
    public final static String FIND_BY_FECHA_ASIGCAR = "Examen.FIND_BY_FECHA_ASIGCAR";
    public final static String FIND_DISPONIBLES_ESTUDIANTE = "Examen.FIND_DISPONIBLES_ESTUDIANTE";
    
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO )
    private Long id;

    @Basic
    private Date fecha;

    @ManyToOne(targetEntity = Asignatura_Carrera.class)
    private Asignatura_Carrera asignatura_Carrera;

    @OneToMany(fetch = FetchType.EAGER, targetEntity = Estudiante_Examen.class, mappedBy = "examen")
    private List<Estudiante_Examen> examenes;


    public Examen(DtExamen examen) {
        this.fecha = examen.getFecha();
        this.asignatura_Carrera = new Asignatura_Carrera(examen.getAsignatura_Carrera().getAsignatura(), examen.getAsignatura_Carrera().getCarrera());
    }
    
    public Examen() {
    }

    public Examen(Date fecha, Asignatura_Carrera asignatura_Carrera) {
        this.fecha = fecha;
        this.asignatura_Carrera = asignatura_Carrera;
    }

    public Examen(Long id, Date fecha, Asignatura_Carrera asignatura_Carrera) {
        this.id = id;
        this.fecha = fecha;
        this.asignatura_Carrera = asignatura_Carrera;
    }

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Date getFecha() {
        return this.fecha;
    }

    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }

    public Asignatura_Carrera getAsignatura_Carrera() {
        return this.asignatura_Carrera;
    }

    public void setAsignatura_Carrera(Asignatura_Carrera asignatura_Carrera) {
        this.asignatura_Carrera = asignatura_Carrera;
    }

    public List<Estudiante_Examen> getExamenes() {
        return this.examenes;
    }

    public void setExamenes(List<Estudiante_Examen> examenes) {
        this.examenes = examenes;
    }
    
     public void addExamenes(Estudiante_Examen calificacionExamen) {
        this.examenes.add(calificacionExamen);
    }
    
    public DtExamen toDataType(){
        DtAsignatura_Carrera asignatura_Carrera = new DtAsignatura_Carrera(this.asignatura_Carrera.getId(),
                new DtCarrera(this.asignatura_Carrera.getCarrera().getCodigo(), this.asignatura_Carrera.getCarrera().getNombre()),
                new DtAsignatura(this.asignatura_Carrera.getAsignatura().getCodigo(), this.asignatura_Carrera.getAsignatura().getNombre())
        );
        return new DtExamen(this.id, this.fecha, asignatura_Carrera);
    }
    
    public DtExamenAng toDataTypeAng(){
        DtAsignatura_Carrera asignatura_Carrera = new DtAsignatura_Carrera(this.asignatura_Carrera.getId(),
                new DtCarrera(this.asignatura_Carrera.getCarrera().getCodigo(), this.asignatura_Carrera.getCarrera().getNombre()),
                new DtAsignatura(this.asignatura_Carrera.getAsignatura().getCodigo(), this.asignatura_Carrera.getAsignatura().getNombre())
        );
        return new DtExamenAng(this.id, this.fecha, asignatura_Carrera);
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 59 * hash + Objects.hashCode(this.id);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Examen other = (Examen) obj;
        if (!Objects.equals(this.id, other.id)) {
            return false;
        }
        return true;
    }
    
    

}
